@startuml
title map kyodo-co
class App <<(C,lightgreen) Component>>{
- @state bus: VueInstance
- @state logonUser: Object
- @state userSetting: Object
 
}

package router{
   class Router<<(R,orchid) VueRooter>>{
      - routes: Array
   }
   note as NoteRouter #pink
   <b>重要</b>
   URL(#/以降)の内容に従って、マウントするコンポーネントを切り替える。
   ページ遷移用。
   今回の設計では、HeaderToolbarは各URL共通のコンポーネントとし、
   それ以外はURLごとに切り替えることとした。
   end note
   
   Router .. NoteRouter
}


package components{
   class HeaderToolbar<<(C,lightgreen) Component>>{
      - @prop bus: VueInstance
      - @prop logonUser: Object
      ---
      + onLogoutClick(): void
   }
   package home{
      class Home<<(C,lightgreen) Component>>{
        - @prop bus: VueInstance
        - @prop logonUser: Object
        - @prop userSetting: Object
        - @state userLocation: Object
        - @state searchCondition: String
      }
      class SearchBox<<(C,lightgreen) Component>>{
        - @prop bus: VueInstance
        - @state searchCondition: String
      }
      class MyLocation<<(C,lightgreen) Component>>{
         - @prop bus: VueInstance
         - @prop userLocation: Object
         - @prop userSetting: Object
         ----
         + geoEnabledChange(val: Boolean): void
         -  location(): Object
      }
      class  MemberLocations<<(C,lightgreen) Component>>{
          - @prop bus: VueInstance
          - @prop logonUser: Object
          - @prop userLocation: Object
          - @prop searchCondition: String
          - @state locations: Array
          ---
          + onRefresh(): void
          - allLocations():Array
      }
      class MemberList<<(C,lightgreen) Component>>{
         - @prop bus: VueInstance
         - @prop userLocation: Object
         - @prop searchCondition: String
         - @state locations: Array
         ----
         - allLocations():Array
      }
   }
   package loading{
      class Loading<<(C,lightgreen) Component>>{
           - @prop bus: VueInstance
      }
   }
   package login{
      class Login<<(C,lightgreen) Component>>{
          - @prop bus: VueInstance
          + @state userid: String
          + @state password: String
          + @state errorMessage: String
          --- 
          + tryLogin(): void
      }
   }
   package signup{
       class SignUp<<(C,lightgreen) Component>>{
         @prop bus: VueInstance
         @state userid: String
         @state useridRules: Array
         @state username: String
         @state usernameRules: Array
         @state mobile: String
         @state mobileRules: Array
         @state password: String
         @state passwordRules: Array
         @state passwordConfirm: String
         @state passwordConfirmRules: Array
         @state valid: Boolean
         @state errorMessage: String
         ---
         + onSignUpClick(): void
      }
   }
}

package apis{
   package client{
      class UserLocationAPI<<(A,pink) API>>{
        - bus: VueInstance
        - watchId: Number
        - position: Object
        ---
        - _setGeolocationEnabled(geolocationEnabled: Boolean): void
        - _getLocation(): void
        - _watchLocation(): void
        - _clearWatchLocation(): void
        - _onLocationSuccess(locaton: Object): void
        - _onLocationFailure(error: Object): void
      }
      package storage{
         class LogonCacheAPI<<(A,pink) API>>{
          - bus: VueInstance
          - storage: LocalStorage
          ---
          + setCache(userdata: Object): void
          + getCache(): Object
          + removeCache(): void
         }
         class UserSettingAPI<<(A,pink) API>>{
          - bus: VueInstance
          - userid: String
          - settingKey: String
          - storage: LocalStorage
          - setting: Object
          ---
          + reload(userid: String): void
          - _loadSetting(): void
          + setSetting(key: String, value: String): void
         }
      }
   }
   package server{
      class UserAPI<<(A,pink) API>>{
        - bus: VueInstance
        - currentUser: Object
        ---
        + login(id: String, pass: String): void
        + logout()
        + signup(newUser: Object): void
      }
      class PositionAPI<<(A,pink) API>>{
        - bus: VueInstance
        - logonUser: Object
        - timerId: Number
        ---
        + startPolling(): void
        + endPolling(): void
        + updatePositions(): void
        + sendUserLocation(userLocation: Object): void
      }
   }
}

package events{
   enum USER{
      LOGIN
      LOGOUT
      TRY_LOGIN
      TRY_LOGOUT
      LOGIN_FAILURE
      TRY_SIGNUP
      SIGNUP_SUCCESS
      SIGNUP_FAILURE
   }
   enum USERSETTING{
     CHANGED
     SET_SETTING
   }
   enum USERLOCATION{
      CHANGED
      ERROR
   }
   enum MEMBERLOCATIONS{
      UPDATED
      REFRESH
      FILTER
   }
}

class EventBus<<(V,lightblue) VueInstance>>{

}

note as NoteEventBus#pink
<b>重要</b>
今回のEvent Busは、
Component間のイベント送受信のみならず、
Component - API間のイベント送受信も担当する。

一部の例外は除き、APIには直接アクセスするのではなく、
EventBusを経由してイベントでやりとりをすること。
end note

EventBus .. NoteEventBus

App .down.> HeaderToolbar
App .down.> Router
App ..> UserAPI : initialize
App ..> PositionAPI : initialize
App .down. EventBus

Router .down.> Loading
Router .down.> Login
Router .down.> SignUp
Router .down.> Home

Home .down.> SearchBox
Home .down.> MyLocation
Home .down.> MemberLocations
Home .down.> MemberList
Home ..> UserLocationAPI : initialize


UserAPI ..> UserSettingAPI : initialize
UserAPI ..> LogonCacheAPI : initialize

components .. EventBus
apis .right. EventBus
events .up. EventBus
@enduml